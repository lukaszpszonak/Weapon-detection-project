# -*- coding: utf-8 -*-
"""Master's Project - Lukasz Pszonak.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gd8tGpNkcdmiu9PNM_rzHOckQYxbAUz9
"""

# Commented out IPython magic to ensure Python compatibility.
#importing necessary libraries
from IPython.display import display, Javascript, Image
from google.colab.output import eval_js #future work
from google.colab.patches import cv2_imshow
from base64 import b64decode, b64encode
import cv2 
import numpy as np
import PIL #future work
import io
import html #future work
import time #future work
import matplotlib.pyplot as plt

# %matplotlib inline

#cloning the darknet repository
!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
#changing makefile to have GPU, OPENCV and LIBSO enabled
# %cd /content/darknet
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile
!sed -i 's/LIBSO=0/LIBSO=1/' Makefile #future work

#verifying CUDA's version
!/usr/local/cuda/bin/nvcc --version

#make darknet or build the framework (backbone of the detector)
!make

# Commented out IPython magic to ensure Python compatibility.
#defining helper functions that will be used after the training's done

def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)
  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

#uploading files
def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

#downloading files  
def download(path):
  from google.colab import files
  files.download(path)

# Commented out IPython magic to ensure Python compatibility.
#accessing google drive
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

#this creates a symbolic link so that now the path /content/gdrive/My\ Drive/ is equal to /mydrive
!ln -s /content/gdrive/My\ Drive/ /mydrive
!ls /mydrive

# Commented out IPython magic to ensure Python compatibility.
# %cd darknet

#this is where my datasets are stored within my Google Drive 
#(I created a yolov4 folder to store all important files for custom training) 
!ls /mydrive/moje

#copying over both datasets into the root directory of the Colab Virtual Machine 
!cp /mydrive/moje/obj.zip ../
!cp /mydrive/moje/test.zip ../

#unzipping the created and labelled datasets to /darknet/data/ folder
!unzip ../obj.zip -d data/
!unzip ../test.zip -d data/

#downloading config file to my google drive and changing its name
#!cp cfg/yolov4-custom.cfg /mydrive/moje/yolov4-obj.cfg

"""
***Configuration manual for the config file in Drive:***

Batch size recommended 64, 
subdivisions recommended 16 (update 1, due to memory issues changed to 32) | (update 2 - changed to 64)

***Rest of the changes should be done accordingly to how many classes the detector should be able to predict:****

***Applied the following:***

**max_batches = 6000**, **steps = 4800, 5400**, I changed the **classes ** in the three YOLO layers and **filters** in the three convolutional layers before the YOLO layers.

***How to Configure the Variables:***

width = 416

height = 416
**The above mentioned width and height can be any multiple of 32, 416 and 608 tested. The higher the more accurate (not always) but the training time drastically increases (always)**

max_batches = (# of classes) * 2000, 6000 is a minimum however.


steps = (80% of max_batches), (90% of max_batches)


filters = (# of classes + 5) * 3


Filters should be changed in the three convolutional layers before the YOLO layers.

Reference: https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects

"""

# upload the custom .cfg back to cloud VM from Google Drive
!cp /mydrive/moje/yolov4-obj.cfg ./cfg

#upload the created obj.names and obj.data files to cloud of this Virtual 
#Machine from my Google Drive
!cp /mydrive/moje/obj.names ./data
!cp /mydrive/moje/obj.data  ./data
!cp /mydrive/moje/obj1.data ./data

# Commented out IPython magic to ensure Python compatibility.
#%cd
# %cd /content/darknet

#uploading the created generate_train.py and generate_test.py scripts to 
#cloud of this Virtual Machine from my Google Drive
!cp /mydrive/moje/generate_train.py ./
!cp /mydrive/moje/generate_test.py ./

# Commented out IPython magic to ensure Python compatibility.
# %cd

!python generate_train.py
!python generate_test.py

#verifying whether the newly generated train.txt and test.txt can be accessed 
#in the darknet/data folder in the virtual machine
!ls /content/darknet/data/
#!ls /darknet/data/

#downloading the pre-trained weights for the convolutional layers
#reference: https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137



"""***THE BELOW FUNCTION PREVENTS COLAB FROM GOING IDLE DURING TRAINING AND STOPPING IT DUE TO DISCONNECTION***

function ClickConnect(){
console.log("Working"); 
document
  .querySelector('#top-toolbar > colab-connect-button')
  .shadowRoot.querySelector('#connect')
  .click() 
}
setInterval(ClickConnect,60000)

click screen
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/darknet

#training the detector! 
# %%capture - used for memory issues or when colab crashes
#!./darknet detector train data/obj.data cfg/yolov4-obj.cfg yolov4.conv.137 -dont_show -map

#kicking off training from where it last saved
#%%capture
#!./darknet detector train data/obj.data cfg/yolov4-obj.cfg /mydrive/moje/backup/yolov4-obj_last.weights  -dont_show

#the following command checks the mean average precision of the detector 
#!./darknet detector map data/obj.data cfg/yolov4-obj.cfg /mydrive/moje/backup/yolov4-obj_last.weights

# Commented out IPython magic to ensure Python compatibility.
#running the weapon detector
#setting the cfg file to test mode 
# %cd /content/darknet/cfg
!sed -i 's/batch=64/batch=1/' yolov4-obj.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov4-obj.cfg
# %cd ..

#running the detector
!./darknet detector test data/obj.data cfg/yolov4-obj.cfg /mydrive/moje/backup/yolov4-obj_last.weights /mydrive/moje/Demo/demopic5.jpg -thresh 0.3
imShow('predictions.jpg')

#download('result.json')
#download('predictions.jpg')

#creating the results file for videos
!./darknet detector demo data/obj.data cfg/yolov4-obj.cfg /mydrive/moje/backup/yolov4-obj_last.weights -dont_show /mydrive/moje/Demo/demovid1.mp4 -i 0  -thresh 0.3 -out_filename /mydrive/moje/resultvideo1.avi


***future work:***
import io
import base64
from IPython.display import HTML
video = io.open('results.avi', 'r+b').read()
encoded = base64.b64encode(video)
HTML(data='''<video alt="test" controls><source src="data:video/mp4;base64,{0}" type="video/mp4" /></video>'''.format(encoded.decode('ascii')))